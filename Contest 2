 Question A: https://codeforces.com/gym/449492/problem/A
Question B: https://codeforces.com/gym/449492/problem/B
Questtion C: https://codeforces.com/gym/449492/problem/C
Question D:https://codeforces.com/gym/449492/problem/D

My Solutions:
A.

#include <iostream>
using namespace std;

int main()
{
    int t;
    long long int n;
    cin>>t;
    while(t--)
    {
        cin>>n;
        if(n%2050)
        cout<<-1<<endl;
        else
        {
            long long sum=0,x=(long long int)n/2050;
            while(x>0)
            {
                sum+=x%10;
                x/=10;
            }
            cout<<sum<<endl;
        }
    }
    return 0;
}

B:


#include<bits/stdc++.h>
using namespace std;
 
int main()
{
	int n;
	cin >>n;
	while (n--)
	{
		string s;
		cin >> s;
		map<char, char>mp;
		if (s[0] == s[s.size() - 1])
		{
			cout << "NO" << endl;
			continue;
		}
		mp[s[0]] = '(';
		mp[s[s.size() - 1]] = ')';
		int cnt0 = 0, cnt1 = 0;
		int res = 0;
		for (int i = 0; i < s.size(); i++)
		{
			if (s[i] == s[0])
			{
				cnt0++;
			}
			else if (s[i] == s[s.size() - 1])
			{
				cnt1++;
			}
			else
			{
				res++;
			}
		}
		int ans1 = abs(cnt0 - cnt1);
		if (ans1 == res)
		{
			int  m;
			if (cnt1 >= cnt0)
			{
				m= 0;
			}
			else
			{
				m =1;
			}
			cnt0 = 0, cnt1 = 0;
			int flag = 0;
			for (int i = 0; i < s.size(); i++)
			{
				if (s[i] == s[0])
				{
					cnt0++;
				}
				else if(s[i]==s[s.size()-1])
				{
					cnt1++;
				}
				else
				{
					if (m == 0)
					{
						cnt0++;
					}
					else
					{
						cnt1++;
					}
				}
				if (cnt0 < cnt1)
				{
					flag = 1;
					break;
				}
			}
			if (flag)
			{
				cout << "NO" << endl;
			}
			else
			{
				cout << "YES" << endl;
			}
		}
		else
		{
			cout << "NO" << endl;
		}
	}
	return 0;
}

D:

#include <bits/stdc++.h>
using namespace std;
#define int long long

int dfs(int node,int par,vector<int>&v,vector<int>&vis,vector<int>&ans,int val)
{
    vis[node]=1;
    int child=v[node];
    if(child==node)
    {
        return ans[child]=1;
    }
    if(!vis[child])
    {
        return ans[node]=dfs(child,node,v,vis,ans,val+1);
    }
    else
    {
        return ans[node]=val;
    }
}


int32_t main() {
    ios_base::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t;
	cin>>t;
	while(t--)
	{
    int n;
    cin>>n;
    vector<int>v(n);
    for(int i=0;i<n;i++)
    {
        cin>>v[i];
        v[i]--;
    }
    vector<int>vis(n),ans(n);
    for(int i=0;i<n;i++)
    {
        if(!vis[i] && v[i]!=i)
        {
            int x=dfs(i,-1,v,vis,ans,1);
        }
        if(v[i]==i)
        {
            ans[i]=1;
        }
    }
    for(int i=0;i<ans.size();i++)
    {
        cout<<ans[i]<<' ';
    }
    cout<<endl;
	}
	
	return 0;
}




